{"version":3,"sources":["images/settings.svg","images/hiragana_stroke_order.png","images/katakana_stroke_order.png","components/Body.tsx","components/Checkbox.tsx","components/Header.tsx","components/HomeButton.tsx","components/Section.tsx","types.ts","getDeckName.ts","modifierNameToClassName.ts","components/Button.tsx","containers/CardMenu.tsx","components/SettingsButton.tsx","containers/DeckMenu.tsx","containers/SettingsMenu.tsx","components/AffirmationSwipeIndicator.tsx","containers/WritingDrill.tsx","romajiArray.ts","decks.ts","randomlySort.ts","containers/PostDrillMenu.tsx","CardsAgainstIlliteracy.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Body","children","className","Checkbox","checked","onClick","Header","background","HomeButton","color","Section","header","StateType","MoraCategory","Deck","RomajiMap","v","Kv","Sv","Tv","Nv","Hv","Mv","Yv","Rv","Wv","N","getDeckName","deck","modifierNameToClassName","baseClass","modifierName","modifierClasses","split","map","modifier","join","Button","CATEGORIES","CardMenu","includedCategories","onToggleCategory","onHome","onDrillStart","category","categoryName","has","key","size","noOp","SettingsButton","src","settingsIcon","alt","DeckMenu","decks","onSettings","onSelect","DIRECTIONS","SettingsMenu","selectedSwipeDirection","areWritingCorrectionsEnabled","onSelectSwipeDirection","onToggleWritingCorrections","direction","AffirmationSwipeIndicator","normalizedDelta","style","width","left","height","top","WritingDrill","this","props","remainingCards","isTopCardRevealed","onReveal","onAffirmationSwipeStart","onAffirmationSwipeMove","onAffirmationSwipeEnd","canvasRef","onPenStart","onPenMove","onPenEnd","onTouchStart","onTouchMove","onTouchEnd","onMouseDown","onMouseMove","onMouseUp","window","innerWidth","innerHeight","ref","romaji","image","current","addEventListener","e","preventDefault","passive","React","Component","romajiArray","HIRAGANA_TABLE_CONFIG","leftCellX","topCellY","cellWidth","cellHeight","crop","columns","rows","cellPositions","Map","row","column","KATAKANA_TABLE_CONFIG","kanaMaps","Hiragana","option","none","Katakana","hiraganaMapLoaded","loadTable","HIRAGANA_TABLE_URL","katakanaMapLoaded","KATAKANA_TABLE_URL","raw","then","imageMap","some","Promise","all","url","config","rProm","fulfill","reject","f","r","createResolvablePromise","tableImage","document","createElement","tableCanvas","tableCtx","getContext","drawImage","kanaMap","cellCanvas","cellCtx","forEach","get","cellLeft","Math","round","cellTop","croppedImageData","getImageData","putImageData","cellImage","toDataURL","set","randomlySort","arr","prng","xorshift","constructor","random","pow","clone","slice","i","fisherYates","len","length","j","randInt","temp","inclMin","exclMax","range","floor","PostDrillMenu","onRestart","HORIZONTAL_SWIPE_SIZE","VERTICAL_SWIPE_SIZE","SUPPORTS_TOUCH","LOCAL_STORAGE_KEYS","CardsAgainstIlliteracy","previousPenLocation","state","stateType","bindMethods","createRef","bind","onDeckSelect","onCardReveal","onKeyUp","onCardCorrect","onCardIncorrect","onDrillRestart","removeEventListener","updatedState","localStorage","getItem","setState","updateState","_stateType","updated","serializedCategorySet","ImmutableSet","categorySetUtils","parse","updatedCategories","remove","add","setItem","stringify","initialCards","categories","cards","push","expect","getInitialCards","newState","cardsToRepractice","startingTouch","undefined","changedTouches","includes","id","identifier","x","clientX","y","clientY","event","newTouch","Array","from","find","t","deltaX","max","min","deltaY","simulateRightSwipe","simulateLeftSwipe","simulateUpSwipe","simulateDownSwipe","clearCanvas","clearRect","concat","type","offsetY","adjustedY","ctx","fillStyle","fillRect","beginPath","moveTo","lineTo","closePath","lineWidth","strokeStyle","stroke","start","Date","now","render","completionFactor","requestAnimationFrame","JSON","keys","string","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bc3345fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/settings.5f70f755.svg\";","module.exports = __webpack_public_path__ + \"static/media/hiragana_stroke_order.e82e3b7c.png\";","module.exports = __webpack_public_path__ + \"static/media/katakana_stroke_order.b38bd4cd.png\";","import React from \"react\";\nimport \"../styles/Body.css\";\n\nexport interface Props {\n  children: React.ReactChild | React.ReactChild[];\n}\n\nexport default function Body({ children }: Props): React.ReactElement {\n  return <div className=\"Body\">{children}</div>;\n}\n","import React from \"react\";\nimport \"../styles/Checkbox.css\";\n\nexport interface Props {\n  children: React.ReactChild | React.ReactChild[];\n  checked: boolean;\n  onClick(event: React.MouseEvent): void;\n}\n\nexport default function Checkbox({\n  children,\n  checked,\n  onClick,\n}: Props): React.ReactElement {\n  return (\n    <div\n      className={\"Checkbox\" + (checked ? \" Checkbox--checked\" : \"\")}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../styles/Header.css\";\n\nexport interface Props {\n  children: React.ReactChild | React.ReactChild[];\n  background: string;\n}\n\nexport default function Header({\n  children,\n  background,\n}: Props): React.ReactElement {\n  return <div className={\"Header Header--\" + background}>{children}</div>;\n}\n","import React from \"react\";\nimport \"../styles/HomeButton.css\";\n\nexport interface Props {\n  color: string;\n  onClick(): void;\n}\n\nexport default function HomeButton({\n  color,\n  onClick,\n}: Props): React.ReactElement {\n  return (\n    <button className={\"HomeButton HomeButton--\" + color} onClick={onClick}>\n      x\n    </button>\n  );\n}\n","import React from \"react\";\nimport \"../styles/Section.css\";\n\nexport interface Props {\n  header: React.ReactChild;\n  children: React.ReactChild | React.ReactChild[];\n}\n\nexport default function Section({\n  header,\n  children,\n}: Props): React.ReactElement {\n  return (\n    <div className=\"Section\">\n      <div className=\"Section__Header\">{header}</div>\n      {children}\n    </div>\n  );\n}\n","import { Set as ImmutableSet } from \"immutable\";\n\nexport type AppState =\n  | DeckMenuState\n  | SettingsState\n  | CardMenuState\n  | WritingDrillState\n  | PostDrillMenuState;\n\nexport enum StateType {\n  DeckMenu,\n  SettingsMenu,\n  CardMenu,\n  WritingDrill,\n  PostDrillMenu,\n}\n\nexport interface AppStateMap {\n  [StateType.DeckMenu]: DeckMenuState;\n  [StateType.SettingsMenu]: SettingsState;\n  [StateType.CardMenu]: CardMenuState;\n  [StateType.WritingDrill]: WritingDrillState;\n  [StateType.PostDrillMenu]: PostDrillMenuState;\n}\n\nexport interface DeckMenuState {\n  stateType: StateType.DeckMenu;\n}\n\nexport interface SettingsState {\n  stateType: StateType.SettingsMenu;\n  selectedSwipeDirection: SwipeDirection;\n  areWritingCorrectionsEnabled: boolean;\n}\n\nexport interface CardMenuState {\n  stateType: StateType.CardMenu;\n  deck: Deck;\n  includedCategories: ImmutableSet<MoraCategory>;\n}\n\nexport interface WritingDrillState {\n  stateType: StateType.WritingDrill;\n  deck: Deck;\n  initialCards: Card[];\n  remainingCards: Card[];\n  cardsToRepractice: Card[];\n  isTopCardRevealed: boolean;\n  areWritingCorrectionsEnabled: boolean;\n  selectedSwipeDirection: SwipeDirection;\n  startingTouch: { id: number; x?: number; y?: number } | undefined;\n  normalizedDelta: number;\n}\n\nexport interface PostDrillMenuState {\n  stateType: StateType.PostDrillMenu;\n  deck: Deck;\n  initialCards: Card[];\n}\n\nexport enum MoraCategory {\n  v,\n  Kv,\n  Sv,\n  Tv,\n  Nv,\n  Hv,\n  Mv,\n  Yv,\n  Rv,\n  Wv,\n  N,\n}\n\nexport type Romaji<\n  S extends MoraCategory = MoraCategory\n> = typeof RomajiMap[S][number];\n\nexport const RomajiMap = {\n  [MoraCategory.v]: [\"a\", \"i\", \"u\", \"e\", \"o\"],\n  [MoraCategory.Kv]: [\"ka\", \"ki\", \"ku\", \"ke\", \"ko\"],\n  [MoraCategory.Sv]: [\"sa\", \"shi\", \"su\", \"se\", \"so\"],\n  [MoraCategory.Tv]: [\"ta\", \"chi\", \"tsu\", \"te\", \"to\"],\n  [MoraCategory.Nv]: [\"na\", \"ni\", \"nu\", \"ne\", \"no\"],\n  [MoraCategory.Hv]: [\"ha\", \"hi\", \"fu\", \"he\", \"ho\"],\n  [MoraCategory.Mv]: [\"ma\", \"mi\", \"mu\", \"me\", \"mo\"],\n  [MoraCategory.Yv]: [\"ya\", \"yu\", \"yo\"],\n  [MoraCategory.Rv]: [\"ra\", \"ri\", \"ru\", \"re\", \"ro\"],\n  [MoraCategory.Wv]: [\"wa\", \"wi\", \"we\", \"wo\"],\n  [MoraCategory.N]: [\"n\"],\n} as const;\n\nexport type SwipeDirection = \"Right\" | \"Left\" | \"Up\" | \"Down\";\n\nexport enum Deck {\n  Hiragana,\n  Katakana,\n}\n\nexport interface Card {\n  readonly romaji: string;\n  readonly image: HTMLImageElement;\n}\n\nexport type PointerDownEvent = TouchStartEvent | MouseDownEvent;\n\nexport interface TouchStartEvent extends React.TouchEvent {\n  type: \"touchstart\";\n}\n\nexport interface MouseDownEvent extends React.MouseEvent {\n  type: \"mousedown\";\n}\n\nexport type PointerMoveEvent = TouchMoveEvent | MouseMoveEvent;\n\nexport interface TouchMoveEvent extends React.TouchEvent {\n  type: \"touchmove\";\n}\n\nexport interface MouseMoveEvent extends React.MouseEvent {\n  type: \"mousemove\";\n}\n\nexport type PointerUpEvent = TouchEndEvent | MouseUpEvent;\n\nexport interface TouchEndEvent extends React.TouchEvent {\n  type: \"touchend\";\n}\n\nexport interface MouseUpEvent extends React.MouseEvent {\n  type: \"mouseup\";\n}\n\nexport type NestedPromiseArray<T> = (T | Promise<T> | NestedPromiseArray<T>)[];\n\nexport type NestedArray<T> = (T | NestedArray<T>)[];\n","import { Deck } from \"./types\";\n\nexport default function getDeckName(deck: Deck): string {\n  return Deck[deck];\n}\n","export default function modifierNameToClassName(\n  baseClass: string,\n  modifierName: string\n): string {\n  const modifiers = modifierName === \"\" ? [] : modifierName.split(\" \");\n  const modifierClasses = modifiers.map(\n    (modifier) => baseClass + \"--\" + modifier\n  );\n  return baseClass + [\"\", ...modifierClasses].join(\" \");\n}\n","import React from \"react\";\nimport modifierNameToClassName from \"../modifierNameToClassName\";\nimport \"../styles/Button.css\";\n\nexport interface Props {\n  modifierName?: string;\n  onClick(): void;\n  children: React.ReactChild | React.ReactChild[];\n}\n\nexport default function Button({\n  modifierName = \"\",\n  onClick,\n  children,\n}: Props): React.ReactElement {\n  return (\n    <div\n      className={modifierNameToClassName(\"Button\", modifierName)}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n}\n","import { Set as ImmutableSet } from \"immutable\";\nimport React from \"react\";\nimport Body from \"../components/Body\";\nimport Checkbox from \"../components/Checkbox\";\nimport Header from \"../components/Header\";\nimport HomeButton from \"../components/HomeButton\";\nimport Section from \"../components/Section\";\nimport getDeckName from \"../getDeckName\";\nimport { Deck, MoraCategory } from \"../types\";\nimport Button from \"../components/Button\";\n\nexport interface Props {\n  deck: Deck;\n  includedCategories: ImmutableSet<MoraCategory>;\n  onToggleCategory(category: MoraCategory): void;\n  onHome(): void;\n  onDrillStart(): void;\n}\n\nconst CATEGORIES: [MoraCategory, string][] = [\n  [MoraCategory.v, \"Vowels\"],\n  [MoraCategory.Kv, \"k-\"],\n  [MoraCategory.Sv, \"s-\"],\n  [MoraCategory.Tv, \"t-\"],\n  [MoraCategory.Nv, \"n-\"],\n  [MoraCategory.Hv, \"h-\"],\n  [MoraCategory.Mv, \"m-\"],\n  [MoraCategory.Yv, \"y-\"],\n  [MoraCategory.Rv, \"r-\"],\n  [MoraCategory.Wv, \"w-\"],\n  [MoraCategory.N, \"n\"],\n];\n\nexport default function CardMenu({\n  deck,\n  includedCategories,\n  onToggleCategory,\n  onHome,\n  onDrillStart,\n}: Props): React.ReactElement {\n  return (\n    <>\n      <Header background=\"blue\">{getDeckName(deck)}</Header>\n      <HomeButton color=\"blue\" onClick={onHome} />\n      <Body>\n        <Section header=\"Categories\">\n          {CATEGORIES.map(([category, categoryName]) => (\n            <Checkbox\n              checked={includedCategories.has(category)}\n              onClick={() => onToggleCategory(category)}\n              key={category}\n            >\n              {categoryName}\n            </Checkbox>\n          ))}\n        </Section>\n        <Button\n          modifierName={\n            (includedCategories.size === 0 ? \"fadedBlue\" : \"blue\") + \" shadow\"\n          }\n          onClick={includedCategories.size === 0 ? noOp : onDrillStart}\n        >\n          Start\n        </Button>\n      </Body>\n    </>\n  );\n}\n\nfunction noOp(): void {}\n","import React from \"react\";\nimport settingsIcon from \"../images/settings.svg\";\nimport \"../styles/SettingsButton.css\";\n\nexport interface Props {\n  onClick(): void;\n}\n\nexport default function SettingsButton({ onClick }: Props): React.ReactElement {\n  return (\n    <img\n      src={settingsIcon}\n      alt=\"Settings button\"\n      className=\"SettingsButton\"\n      onClick={onClick}\n    />\n  );\n}\n","import React from \"react\";\nimport Body from \"../components/Body\";\nimport Button from \"../components/Button\";\nimport Header from \"../components/Header\";\nimport SettingsButton from \"../components/SettingsButton\";\nimport getDeckName from \"../getDeckName\";\nimport { Deck } from \"../types\";\n\nexport interface Props {\n  decks: Deck[];\n\n  onSettings(): void;\n  onSelect(deck: Deck): void;\n}\n\nexport default function DeckMenu({\n  decks,\n\n  onSettings,\n  onSelect,\n}: Props): React.ReactElement {\n  return (\n    <>\n      <Header background=\"white\">Lessons</Header>\n      <SettingsButton onClick={onSettings} />\n      <Body>\n        {decks.map(deck => (\n          <Button\n            modifierName=\"blue shadow\"\n            onClick={() => onSelect(deck)}\n            key={deck}\n          >\n            {getDeckName(deck)}\n          </Button>\n        ))}\n      </Body>\n    </>\n  );\n}\n","import React from \"react\";\nimport Body from \"../components/Body\";\nimport Checkbox from \"../components/Checkbox\";\nimport Header from \"../components/Header\";\nimport HomeButton from \"../components/HomeButton\";\nimport Section from \"../components/Section\";\nimport { SwipeDirection } from \"../types\";\n\nexport interface Props {\n  selectedSwipeDirection: SwipeDirection;\n  areWritingCorrectionsEnabled: boolean;\n\n  onHome(): void;\n  onSelectSwipeDirection(direction: SwipeDirection): void;\n  onToggleWritingCorrections(): void;\n}\n\nconst DIRECTIONS: SwipeDirection[] = [\"Right\", \"Left\", \"Up\", \"Down\"];\n\nexport default function SettingsMenu({\n  selectedSwipeDirection,\n  areWritingCorrectionsEnabled,\n\n  onHome,\n  onSelectSwipeDirection,\n  onToggleWritingCorrections,\n}: Props): React.ReactElement {\n  return (\n    <>\n      <Header background=\"blue\">Settings</Header>\n      <HomeButton color=\"blue\" onClick={onHome} />\n      <Body>\n        <Section header=\"Correct Answer Swipe Direction\">\n          {DIRECTIONS.map(direction => (\n            <Checkbox\n              checked={direction === selectedSwipeDirection}\n              onClick={() => onSelectSwipeDirection(direction)}\n              key={direction}\n            >\n              {direction}\n            </Checkbox>\n          ))}\n        </Section>\n        <Section header=\"Writing Corrections\">\n          <Checkbox\n            checked={areWritingCorrectionsEnabled}\n            onClick={onToggleWritingCorrections}\n          >\n            Enabled?\n          </Checkbox>\n        </Section>\n      </Body>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"../styles/AffirmationSwipeIndicator.css\";\nimport { SwipeDirection } from \"../types\";\n\nexport interface Props {\n  selectedSwipeDirection: SwipeDirection;\n  normalizedDelta: number;\n}\n\nexport default function AffirmationSwipeIndicator({\n  selectedSwipeDirection,\n  normalizedDelta,\n}: Props): React.ReactElement {\n  switch (selectedSwipeDirection) {\n    case \"Right\":\n      return normalizedDelta > 0 ? (\n        <div\n          className=\"AffirmationSwipeIndicator--horizontal--correct\"\n          style={{\n            width: normalizedDelta * 100 + \"vw\",\n          }}\n        />\n      ) : (\n        <div\n          className=\"AffirmationSwipeIndicator--horizontal--incorrect\"\n          style={{\n            left: (1 + normalizedDelta) * 100 + \"vw\",\n            width: -normalizedDelta * 100 + \"vw\",\n          }}\n        />\n      );\n    case \"Left\":\n      return normalizedDelta > 0 ? (\n        <div\n          className=\"AffirmationSwipeIndicator--horizontal--incorrect\"\n          style={{\n            width: normalizedDelta * 100 + \"vw\",\n          }}\n        />\n      ) : (\n        <div\n          className=\"AffirmationSwipeIndicator--horizontal--correct\"\n          style={{\n            left: (1 + normalizedDelta) * 100 + \"vw\",\n            width: -normalizedDelta * 100 + \"vw\",\n          }}\n        />\n      );\n    case \"Up\":\n      return normalizedDelta > 0 ? (\n        <div\n          className=\"AffirmationSwipeIndicator--vertical--incorrect\"\n          style={{\n            height: normalizedDelta * 89 + \"vh\",\n          }}\n        />\n      ) : (\n        <div\n          className=\"AffirmationSwipeIndicator--vertical--correct\"\n          style={{\n            top: 11 + (1 + normalizedDelta) * 89 + \"vh\",\n            height: -normalizedDelta * 89 + \"vh\",\n          }}\n        />\n      );\n    case \"Down\":\n      return normalizedDelta > 0 ? (\n        <div\n          className=\"AffirmationSwipeIndicator--vertical--correct\"\n          style={{\n            height: normalizedDelta * 89 + \"vh\",\n          }}\n        />\n      ) : (\n        <div\n          className=\"AffirmationSwipeIndicator--vertical--incorrect\"\n          style={{\n            top: 11 + (1 + normalizedDelta) * 89 + \"vh\",\n            height: -normalizedDelta * 89 + \"vh\",\n          }}\n        />\n      );\n  }\n}\n","import React from \"react\";\nimport AffirmationSwipeIndicator from \"../components/AffirmationSwipeIndicator\";\nimport Header from \"../components/Header\";\nimport HomeButton from \"../components/HomeButton\";\nimport getDeckName from \"../getDeckName\";\nimport \"../styles/WritingDrill.css\";\nimport {\n  Card,\n  Deck,\n  PointerDownEvent,\n  PointerMoveEvent,\n  PointerUpEvent,\n  SwipeDirection,\n} from \"../types\";\n\nexport interface Props {\n  deck: Deck;\n  remainingCards: Card[];\n  isTopCardRevealed: boolean;\n  selectedSwipeDirection: SwipeDirection;\n  normalizedDelta: number;\n  areWritingCorrectionsEnabled: boolean;\n\n  onHome(): void;\n  onPenStart(event: PointerDownEvent): void;\n  onPenMove(event: PointerMoveEvent): void;\n  onPenEnd(event: PointerUpEvent): void;\n  onReveal(): void;\n  onAffirmationSwipeStart(event: React.TouchEvent): void;\n  onAffirmationSwipeMove(event: React.TouchEvent): void;\n  onAffirmationSwipeEnd(event: React.TouchEvent): void;\n\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n}\n\nexport interface State {}\n\nexport default class WritingDrill extends React.Component<Props, State> {\n  render() {\n    const {\n      deck,\n      remainingCards,\n      isTopCardRevealed,\n      selectedSwipeDirection,\n      normalizedDelta,\n      areWritingCorrectionsEnabled,\n\n      onHome,\n      onReveal,\n      onAffirmationSwipeStart,\n      onAffirmationSwipeMove,\n      onAffirmationSwipeEnd,\n\n      canvasRef,\n    } = this.props;\n\n    const onPenStart = this.props.onPenStart as (\n      event: React.TouchEvent | React.MouseEvent,\n    ) => void;\n    const onPenMove = this.props.onPenMove as (\n      event: React.TouchEvent | React.MouseEvent,\n    ) => void;\n    const onPenEnd = this.props.onPenEnd as (\n      event: React.TouchEvent | React.MouseEvent,\n    ) => void;\n\n    if (isTopCardRevealed) {\n      return (\n        <>\n          <Header background=\"blue\">{getDeckName(deck)}</Header>\n          <HomeButton color=\"blue\" onClick={onHome} />\n          <canvas\n            onTouchStart={\n              areWritingCorrectionsEnabled\n                ? onPenStart\n                : onAffirmationSwipeStart\n            }\n            onTouchMove={\n              areWritingCorrectionsEnabled ? onPenMove : onAffirmationSwipeMove\n            }\n            onTouchEnd={\n              areWritingCorrectionsEnabled ? onPenEnd : onAffirmationSwipeEnd\n            }\n            onMouseDown={areWritingCorrectionsEnabled ? onPenStart : noOp}\n            onMouseMove={areWritingCorrectionsEnabled ? onPenMove : noOp}\n            onMouseUp={areWritingCorrectionsEnabled ? onPenEnd : noOp}\n            width={window.innerWidth}\n            height={window.innerHeight * 0.62}\n            ref={canvasRef}\n          />\n          <div\n            className=\"WritingDrill__CharacterContainer\"\n            onTouchStart={onAffirmationSwipeStart}\n            onTouchMove={onAffirmationSwipeMove}\n            onTouchEnd={onAffirmationSwipeEnd}\n          >\n            <div className=\"WritingDrill__Characters\">\n              <img\n                className=\"WritingDrill__StrokeOrderImage\"\n                alt={remainingCards[0].romaji + \" stroke order\"}\n                src={remainingCards[0].image.src}\n              />\n            </div>\n          </div>\n          <AffirmationSwipeIndicator\n            selectedSwipeDirection={selectedSwipeDirection}\n            normalizedDelta={normalizedDelta}\n          />\n        </>\n      );\n    }\n    return (\n      <>\n        <Header background=\"blue\">{getDeckName(deck)}</Header>\n        <HomeButton color=\"blue\" onClick={onHome} />\n        <canvas\n          onTouchStart={onPenStart}\n          onTouchMove={onPenMove}\n          onMouseDown={onPenStart}\n          onMouseMove={onPenMove}\n          onMouseUp={onPenEnd}\n          width={window.innerWidth}\n          height={window.innerHeight * 0.62}\n          ref={canvasRef}\n        />\n        <div className=\"WritingDrill__Romaji\" onClick={onReveal}>\n          {remainingCards[0].romaji}\n        </div>\n      </>\n    );\n  }\n\n  componentDidMount() {\n    this.props.canvasRef.current!.addEventListener(\n      \"touchmove\",\n      e => {\n        e.preventDefault();\n      },\n      { passive: false },\n    );\n  }\n}\n\nfunction noOp(): void {}\n","import { Romaji } from \"./types\";\n\nconst romajiArray: Romaji[] = [\n  \"a\",\n  \"i\",\n  \"u\",\n  \"e\",\n  \"o\",\n  \"ka\",\n  \"ki\",\n  \"ku\",\n  \"ke\",\n  \"ko\",\n  \"sa\",\n  \"shi\",\n  \"su\",\n  \"se\",\n  \"so\",\n  \"ta\",\n  \"chi\",\n  \"tsu\",\n  \"te\",\n  \"to\",\n  \"na\",\n  \"ni\",\n  \"nu\",\n  \"ne\",\n  \"no\",\n  \"ha\",\n  \"hi\",\n  \"fu\",\n  \"he\",\n  \"ho\",\n  \"ma\",\n  \"mi\",\n  \"mu\",\n  \"me\",\n  \"mo\",\n  \"ya\",\n  \"yu\",\n  \"yo\",\n  \"ra\",\n  \"ri\",\n  \"ru\",\n  \"re\",\n  \"ro\",\n  \"wa\",\n  \"wi\",\n  \"we\",\n  \"wo\",\n  \"n\",\n];\n\nexport default romajiArray;\n","import { option, Option } from \"rusty-ts\";\nimport romajiArray from \"./romajiArray\";\nimport { Romaji, Deck } from \"./types\";\nimport HIRAGANA_TABLE_URL from \"./images/hiragana_stroke_order.png\";\nimport KATAKANA_TABLE_URL from \"./images/katakana_stroke_order.png\";\n\nexport interface KanaMaps {\n  [Deck.Hiragana]: Option<KanaMap>;\n  [Deck.Katakana]: Option<KanaMap>;\n}\n\nexport type KanaMap = Map<Romaji, HTMLImageElement>;\n\ninterface ResolvablePromise<T> {\n  readonly raw: Promise<T>;\n  fulfill(value: T): void;\n  reject(value: unknown): void;\n}\n\ninterface TableConfig {\n  leftCellX: number;\n  topCellY: number;\n  cellWidth: number;\n  cellHeight: number;\n  crop: {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  columns: number;\n  rows: number;\n  cellPositions: Map<Romaji, CellPosition>;\n}\n\ninterface CellPosition {\n  column: number;\n  row: number;\n}\n\nconst HIRAGANA_TABLE_CONFIG: TableConfig = {\n  leftCellX: 58,\n  topCellY: 162,\n  cellWidth: 213.3,\n  cellHeight: 266.5,\n  crop: {\n    left: 0,\n    top: 0,\n    width: 206,\n    height: 187,\n  },\n  columns: 11,\n  rows: 5,\n  cellPositions: new Map<Romaji, CellPosition>([\n    [\"n\", { row: 0, column: 0 }],\n\n    [\"wa\", { row: 0, column: 1 }],\n    [\"wi\", { row: 1, column: 1 }],\n    [\"we\", { row: 3, column: 1 }],\n    [\"wo\", { row: 4, column: 1 }],\n\n    [\"ra\", { row: 0, column: 2 }],\n    [\"ri\", { row: 1, column: 2 }],\n    [\"ru\", { row: 2, column: 2 }],\n    [\"re\", { row: 3, column: 2 }],\n    [\"ro\", { row: 4, column: 2 }],\n\n    [\"ya\", { row: 0, column: 3 }],\n    [\"yu\", { row: 2, column: 3 }],\n    [\"yo\", { row: 4, column: 3 }],\n\n    [\"ma\", { row: 0, column: 4 }],\n    [\"mi\", { row: 1, column: 4 }],\n    [\"mu\", { row: 2, column: 4 }],\n    [\"me\", { row: 3, column: 4 }],\n    [\"mo\", { row: 4, column: 4 }],\n\n    [\"ha\", { row: 0, column: 5 }],\n    [\"hi\", { row: 1, column: 5 }],\n    [\"fu\", { row: 2, column: 5 }],\n    [\"he\", { row: 3, column: 5 }],\n    [\"ho\", { row: 4, column: 5 }],\n\n    [\"na\", { row: 0, column: 6 }],\n    [\"ni\", { row: 1, column: 6 }],\n    [\"nu\", { row: 2, column: 6 }],\n    [\"ne\", { row: 3, column: 6 }],\n    [\"no\", { row: 4, column: 6 }],\n\n    [\"ta\", { row: 0, column: 7 }],\n    [\"chi\", { row: 1, column: 7 }],\n    [\"tsu\", { row: 2, column: 7 }],\n    [\"te\", { row: 3, column: 7 }],\n    [\"to\", { row: 4, column: 7 }],\n\n    [\"sa\", { row: 0, column: 8 }],\n    [\"shi\", { row: 1, column: 8 }],\n    [\"su\", { row: 2, column: 8 }],\n    [\"se\", { row: 3, column: 8 }],\n    [\"so\", { row: 4, column: 8 }],\n\n    [\"ka\", { row: 0, column: 9 }],\n    [\"ki\", { row: 1, column: 9 }],\n    [\"ku\", { row: 2, column: 9 }],\n    [\"ke\", { row: 3, column: 9 }],\n    [\"ko\", { row: 4, column: 9 }],\n\n    [\"a\", { row: 0, column: 10 }],\n    [\"i\", { row: 1, column: 10 }],\n    [\"u\", { row: 2, column: 10 }],\n    [\"e\", { row: 3, column: 10 }],\n    [\"o\", { row: 4, column: 10 }],\n  ]),\n};\n\nconst KATAKANA_TABLE_CONFIG: TableConfig = {\n  leftCellX: 58,\n  topCellY: 162,\n  cellWidth: 213.3,\n  cellHeight: 266.5,\n  crop: {\n    left: 0,\n    top: 0,\n    width: 206,\n    height: 187,\n  },\n  columns: 11,\n  rows: 5,\n  cellPositions: new Map([\n    [\"n\", { row: 0, column: 0 }],\n\n    [\"wa\", { row: 0, column: 1 }],\n    [\"wi\", { row: 1, column: 1 }],\n    [\"we\", { row: 3, column: 1 }],\n    [\"wo\", { row: 4, column: 1 }],\n\n    [\"ra\", { row: 0, column: 2 }],\n    [\"ri\", { row: 1, column: 2 }],\n    [\"ru\", { row: 2, column: 2 }],\n    [\"re\", { row: 3, column: 2 }],\n    [\"ro\", { row: 4, column: 2 }],\n\n    [\"ya\", { row: 0, column: 3 }],\n    [\"yu\", { row: 2, column: 3 }],\n    [\"yo\", { row: 4, column: 3 }],\n\n    [\"ma\", { row: 0, column: 4 }],\n    [\"mi\", { row: 1, column: 4 }],\n    [\"mu\", { row: 2, column: 4 }],\n    [\"me\", { row: 3, column: 4 }],\n    [\"mo\", { row: 4, column: 4 }],\n\n    [\"ha\", { row: 0, column: 5 }],\n    [\"hi\", { row: 1, column: 5 }],\n    [\"fu\", { row: 2, column: 5 }],\n    [\"he\", { row: 3, column: 5 }],\n    [\"ho\", { row: 4, column: 5 }],\n\n    [\"na\", { row: 0, column: 6 }],\n    [\"ni\", { row: 1, column: 6 }],\n    [\"nu\", { row: 2, column: 6 }],\n    [\"ne\", { row: 3, column: 6 }],\n    [\"no\", { row: 4, column: 6 }],\n\n    [\"ta\", { row: 0, column: 7 }],\n    [\"chi\", { row: 1, column: 7 }],\n    [\"tsu\", { row: 2, column: 7 }],\n    [\"te\", { row: 3, column: 7 }],\n    [\"to\", { row: 4, column: 7 }],\n\n    [\"sa\", { row: 0, column: 8 }],\n    [\"shi\", { row: 1, column: 8 }],\n    [\"su\", { row: 2, column: 8 }],\n    [\"se\", { row: 3, column: 8 }],\n    [\"so\", { row: 4, column: 8 }],\n\n    [\"ka\", { row: 0, column: 9 }],\n    [\"ki\", { row: 1, column: 9 }],\n    [\"ku\", { row: 2, column: 9 }],\n    [\"ke\", { row: 3, column: 9 }],\n    [\"ko\", { row: 4, column: 9 }],\n\n    [\"a\", { row: 0, column: 10 }],\n    [\"i\", { row: 1, column: 10 }],\n    [\"u\", { row: 2, column: 10 }],\n    [\"e\", { row: 3, column: 10 }],\n    [\"o\", { row: 4, column: 10 }],\n  ]),\n};\n\nexport const kanaMaps: KanaMaps = {\n  [Deck.Hiragana]: option.none(),\n  [Deck.Katakana]: option.none(),\n};\n\nconst hiraganaMapLoaded = loadTable(HIRAGANA_TABLE_URL, HIRAGANA_TABLE_CONFIG);\nconst katakanaMapLoaded = loadTable(KATAKANA_TABLE_URL, KATAKANA_TABLE_CONFIG);\n\nhiraganaMapLoaded.raw.then(imageMap => {\n  kanaMaps[Deck.Hiragana] = option.some(imageMap);\n});\nkatakanaMapLoaded.raw.then(imageMap => {\n  kanaMaps[Deck.Katakana] = option.some(imageMap);\n});\n\nexport const kanaMapsLoaded = Promise.all([\n  hiraganaMapLoaded.raw,\n  katakanaMapLoaded.raw,\n]);\n\nfunction loadTable(\n  url: string,\n  config: TableConfig,\n): ResolvablePromise<KanaMap> {\n  const rProm = createResolvablePromise<KanaMap>();\n  const tableImage = document.createElement(\"img\");\n  tableImage.src = url;\n\n  tableImage.addEventListener(\"load\", () => {\n    const tableCanvas = document.createElement(\"canvas\");\n    tableCanvas.width = tableImage.width;\n    tableCanvas.height = tableImage.height;\n    const tableCtx = tableCanvas.getContext(\"2d\")!;\n    tableCtx.drawImage(tableImage, 0, 0);\n\n    const kanaMap = new Map<Romaji, HTMLImageElement>();\n\n    const cellCanvas = document.createElement(\"canvas\");\n    cellCanvas.width = config.crop.width;\n    cellCanvas.height = config.crop.height;\n    const cellCtx = cellCanvas.getContext(\"2d\")!;\n\n    romajiArray.forEach(romaji => {\n      const { column, row } = config.cellPositions.get(romaji)!;\n      const cellLeft = Math.round(config.leftCellX + column * config.cellWidth);\n      const cellTop = Math.round(config.topCellY + row * config.cellHeight);\n      const croppedImageData = tableCtx.getImageData(\n        cellLeft + config.crop.left,\n        cellTop + config.crop.top,\n        config.crop.width,\n        config.crop.height,\n      );\n      cellCtx.putImageData(croppedImageData, 0, 0);\n      const cellImage = document.createElement(\"img\");\n      cellImage.src = cellCanvas.toDataURL(\"image/png\", 1.0);\n      kanaMap.set(romaji, cellImage);\n    });\n\n    rProm.fulfill(kanaMap);\n  });\n\n  tableImage.addEventListener(\"error\", rProm.reject);\n\n  return rProm;\n}\n\nfunction createResolvablePromise<T>(): ResolvablePromise<T> {\n  let fulfill!: (value: T) => void;\n  let reject!: (value: unknown) => void;\n  const raw: Promise<T> = new Promise((f, r) => {\n    fulfill = f;\n    reject = r;\n  });\n  return { raw, fulfill, reject };\n}\n","import xorshift, { Xorshift } from \"xorshift\";\n\nexport default function randomlySort<T>(arr: T[]): T[] {\n  const prng = createPrng();\n\n  const clone = arr.slice();\n  for (let i = 0; i < 512; i++) {\n    fisherYates(clone, prng);\n  }\n  return clone;\n}\n\nfunction createPrng(): Xorshift {\n  return new xorshift.constructor([\n    Math.random() * Math.pow(2, 32),\n    Math.random() * Math.pow(2, 32),\n    Math.random() * Math.pow(2, 32),\n    Math.random() * Math.pow(2, 32),\n  ]);\n}\n\nfunction fisherYates(arr: unknown[], prng: Xorshift) {\n  const len = arr.length;\n  for (let i = 0; i <= len - 2; i++) {\n    const j = randInt(prng, i, len);\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n}\n\nfunction randInt(prng: Xorshift, inclMin: number, exclMax: number): number {\n  const range = exclMax - inclMin;\n  return inclMin + Math.floor(prng.random() * range);\n}\n","import React from \"react\";\nimport Button from \"../components/Button\";\nimport Header from \"../components/Header\";\nimport getDeckName from \"../getDeckName\";\nimport { Deck } from \"../types\";\n\nexport interface Props {\n  deck: Deck;\n  onRestart(): void;\n  onHome(): void;\n}\n\nexport default function PostDrillMenu({\n  deck,\n  onRestart,\n  onHome,\n}: Props): React.ReactElement {\n  return (\n    <>\n      <Header background=\"white\">{getDeckName(deck)}</Header>\n      <Button modifierName=\"blue shadow\" onClick={onRestart}>\n        Restart\n      </Button>\n      <Button modifierName=\"blue shadow\" onClick={onHome}>\n        Home\n      </Button>\n    </>\n  );\n}\n","import { Set as ImmutableSet } from \"immutable\";\nimport React from \"react\";\nimport CardMenu from \"./containers/CardMenu\";\nimport DeckMenu from \"./containers/DeckMenu\";\nimport SettingsMenu from \"./containers/SettingsMenu\";\nimport WritingDrill from \"./containers/WritingDrill\";\nimport { kanaMaps } from \"./decks\";\nimport randomlySort from \"./randomlySort\";\nimport {\n  AppState,\n  AppStateMap,\n  Card,\n  CardMenuState,\n  Deck,\n  MoraCategory,\n  PointerDownEvent,\n  PointerMoveEvent,\n  RomajiMap,\n  SettingsState,\n  StateType,\n  SwipeDirection,\n  WritingDrillState,\n  PostDrillMenuState,\n} from \"./types\";\nimport PostDrillMenu from \"./containers/PostDrillMenu\";\n\nconst HORIZONTAL_SWIPE_SIZE = window.innerWidth * 0.3;\nconst VERTICAL_SWIPE_SIZE = window.innerHeight * 0.2;\n\nconst SIMULATED_SWIPE_DURATION = 0.15e3;\nconst SIMULATED_SWIPE_PAUSE_FACTOR = 0.2;\n\nconst PEN_STROKE_WIDTH = 2;\n\nconst PEN_GUESS_COLOR = \"#000088\";\nconst PEN_CORRECTION_COLOR = \"#0088FF\";\n\nconst SUPPORTS_TOUCH = \"ontouchstart\" in window;\n\nconst LOCAL_STORAGE_KEYS = {\n  selectedSwipeDirection: \"selectedSwipeDirection\",\n  areWritingCorrectionsEnabled: \"areWritingCorrectionsEnabled\",\n  includedCategories: \"includedCategories\",\n} as const;\n\nexport default class CardsAgainstIlliteracy extends React.Component<\n  {},\n  AppState\n> {\n  private canvasRef: React.RefObject<HTMLCanvasElement>;\n  private previousPenLocation: null | { x: number; y: number };\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      stateType: StateType.DeckMenu,\n    };\n\n    this.bindMethods();\n\n    this.canvasRef = React.createRef();\n    this.previousPenLocation = null;\n  }\n\n  bindMethods(): void {\n    this.onSettings = this.onSettings.bind(this);\n    this.onSelectSwipeDirection = this.onSelectSwipeDirection.bind(this);\n    this.onToggleWritingCorrections = this.onToggleWritingCorrections.bind(\n      this,\n    );\n    this.onDeckSelect = this.onDeckSelect.bind(this);\n    this.onToggleCategory = this.onToggleCategory.bind(this);\n    this.onDrillStart = this.onDrillStart.bind(this);\n    this.onCardReveal = this.onCardReveal.bind(this);\n    this.onAffirmationSwipeStart = this.onAffirmationSwipeStart.bind(this);\n    this.onAffirmationSwipeMove = this.onAffirmationSwipeMove.bind(this);\n    this.onAffirmationSwipeEnd = this.onAffirmationSwipeEnd.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.onCardCorrect = this.onCardCorrect.bind(this);\n    this.onCardIncorrect = this.onCardIncorrect.bind(this);\n    this.onDrillRestart = this.onDrillRestart.bind(this);\n    this.onHome = this.onHome.bind(this);\n    this.onPenStart = this.onPenStart.bind(this);\n    this.onPenMove = this.onPenMove.bind(this);\n    this.onPenEnd = this.onPenEnd.bind(this);\n  }\n\n  componentDidMount() {\n    if (!SUPPORTS_TOUCH) {\n      window.addEventListener(\"keyup\", this.onKeyUp);\n    }\n  }\n\n  componentWillUnmount() {\n    if (!SUPPORTS_TOUCH) {\n      window.removeEventListener(\"keyup\", this.onKeyUp);\n    }\n  }\n\n  render(): JSX.Element {\n    const { state } = this;\n\n    switch (state.stateType) {\n      case StateType.DeckMenu:\n        return (\n          <DeckMenu\n            decks={[Deck.Hiragana, Deck.Katakana]}\n            onSettings={this.onSettings}\n            onSelect={this.onDeckSelect}\n          />\n        );\n      case StateType.SettingsMenu:\n        return (\n          <SettingsMenu\n            selectedSwipeDirection={state.selectedSwipeDirection}\n            areWritingCorrectionsEnabled={state.areWritingCorrectionsEnabled}\n            onHome={this.onHome}\n            onSelectSwipeDirection={this.onSelectSwipeDirection}\n            onToggleWritingCorrections={this.onToggleWritingCorrections}\n          />\n        );\n      case StateType.CardMenu: {\n        const { deck, includedCategories } = state;\n        return (\n          <CardMenu\n            deck={deck}\n            includedCategories={includedCategories}\n            onToggleCategory={this.onToggleCategory}\n            onHome={this.onHome}\n            onDrillStart={this.onDrillStart}\n          />\n        );\n      }\n      case StateType.WritingDrill: {\n        const {\n          deck,\n          remainingCards,\n          isTopCardRevealed,\n          selectedSwipeDirection,\n          normalizedDelta,\n          areWritingCorrectionsEnabled,\n        } = state;\n\n        return (\n          <WritingDrill\n            deck={deck}\n            remainingCards={remainingCards}\n            isTopCardRevealed={isTopCardRevealed}\n            selectedSwipeDirection={selectedSwipeDirection}\n            normalizedDelta={normalizedDelta}\n            areWritingCorrectionsEnabled={areWritingCorrectionsEnabled}\n            onHome={this.onHome}\n            onPenStart={this.onPenStart}\n            onPenMove={this.onPenMove}\n            onPenEnd={this.onPenEnd}\n            onReveal={this.onCardReveal}\n            onAffirmationSwipeStart={this.onAffirmationSwipeStart}\n            onAffirmationSwipeMove={this.onAffirmationSwipeMove}\n            onAffirmationSwipeEnd={this.onAffirmationSwipeEnd}\n            canvasRef={this.canvasRef}\n          />\n        );\n      }\n      case StateType.PostDrillMenu: {\n        const { deck } = state;\n\n        return (\n          <PostDrillMenu\n            deck={deck}\n            onHome={this.onHome}\n            onRestart={this.onDrillRestart}\n          />\n        );\n      }\n    }\n  }\n\n  onSettings(): void {\n    const updatedState: SettingsState = {\n      stateType: StateType.SettingsMenu,\n      selectedSwipeDirection:\n        (localStorage.getItem(\n          LOCAL_STORAGE_KEYS.selectedSwipeDirection,\n        ) as SwipeDirection) || \"Right\",\n      areWritingCorrectionsEnabled:\n        localStorage.getItem(\n          LOCAL_STORAGE_KEYS.areWritingCorrectionsEnabled,\n        ) === \"true\",\n    };\n    this.setState(updatedState);\n  }\n\n  onSelectSwipeDirection(selectedSwipeDirection: SwipeDirection): void {\n    this.updateState(StateType.SettingsMenu, {\n      selectedSwipeDirection,\n    });\n    localStorage.selectedSwipeDirection = selectedSwipeDirection;\n  }\n\n  updateState<T extends StateType>(\n    _stateType: T,\n    updated: Partial<AppStateMap[T]>,\n  ): void {\n    this.setState(updated as any);\n  }\n\n  onToggleWritingCorrections(): void {\n    const state = this.state as SettingsState;\n    const areWritingCorrectionsEnabled = !state.areWritingCorrectionsEnabled;\n    const updatedState: Partial<SettingsState> = {\n      areWritingCorrectionsEnabled,\n    };\n    this.updateState(state.stateType, updatedState);\n    localStorage.areWritingCorrectionsEnabled = areWritingCorrectionsEnabled;\n  }\n\n  onDeckSelect(deck: Deck): void {\n    const serializedCategorySet = localStorage.getItem(\n      LOCAL_STORAGE_KEYS.includedCategories,\n    );\n    const updatedState: CardMenuState = {\n      stateType: StateType.CardMenu,\n      deck,\n      includedCategories:\n        serializedCategorySet === null\n          ? ImmutableSet([MoraCategory.v, MoraCategory.N])\n          : categorySetUtils.parse(serializedCategorySet),\n    };\n    this.setState(updatedState);\n  }\n\n  onToggleCategory(category: MoraCategory): void {\n    const state = this.state as CardMenuState;\n    const { includedCategories } = state;\n    const updatedCategories = includedCategories.has(category)\n      ? includedCategories.remove(category)\n      : includedCategories.add(category);\n    this.updateState(state.stateType, {\n      includedCategories: updatedCategories,\n    });\n    localStorage.setItem(\n      LOCAL_STORAGE_KEYS.includedCategories,\n      categorySetUtils.stringify(updatedCategories),\n    );\n  }\n\n  onDrillStart(): void {\n    const state = this.state as CardMenuState;\n    const initialCards = randomlySort(\n      getInitialCards(state.includedCategories, state.deck),\n    );\n\n    const newState: WritingDrillState = {\n      stateType: StateType.WritingDrill,\n      deck: state.deck,\n      initialCards,\n      remainingCards: initialCards,\n      cardsToRepractice: [],\n      isTopCardRevealed: false,\n      areWritingCorrectionsEnabled:\n        localStorage.getItem(\n          LOCAL_STORAGE_KEYS.areWritingCorrectionsEnabled,\n        ) === \"true\",\n      selectedSwipeDirection:\n        (localStorage.getItem(\n          LOCAL_STORAGE_KEYS.selectedSwipeDirection,\n        ) as SwipeDirection) || \"Right\",\n      startingTouch: undefined,\n      normalizedDelta: 0,\n    };\n    this.setState(newState);\n  }\n\n  onAffirmationSwipeStart({ changedTouches }: React.TouchEvent): void {\n    const state = this.state as WritingDrillState;\n    if (!state.isTopCardRevealed) {\n      return;\n    }\n\n    const isSwipeDirectionHorizontal = [\"Right\", \"Left\"].includes(\n      state.selectedSwipeDirection,\n    );\n\n    const touch = isSwipeDirectionHorizontal\n      ? {\n          id: changedTouches[0].identifier,\n          x: changedTouches[0].clientX,\n        }\n      : {\n          id: changedTouches[0].identifier,\n          y: changedTouches[0].clientY,\n        };\n\n    const updatedState: Partial<WritingDrillState> = {\n      startingTouch: touch,\n      normalizedDelta: 0,\n    };\n\n    this.updateState(state.stateType, updatedState);\n  }\n\n  onAffirmationSwipeMove(event: React.TouchEvent): void {\n    const state = this.state as WritingDrillState;\n\n    event.preventDefault();\n    const { changedTouches } = event;\n    const { id } = state.startingTouch!;\n    const newTouch = Array.from(changedTouches).find(t => t.identifier === id);\n    if (!newTouch) {\n      return;\n    }\n    const isSwipeDirectionHorizontal = [\"Right\", \"Left\"].includes(\n      state.selectedSwipeDirection,\n    );\n    if (isSwipeDirectionHorizontal) {\n      const deltaX = newTouch.clientX - state.startingTouch!.x!;\n      const normalizedDelta = Math.max(\n        -1,\n        Math.min(1, deltaX / HORIZONTAL_SWIPE_SIZE),\n      );\n      const updatedState: Partial<WritingDrillState> = {\n        normalizedDelta,\n      };\n      this.updateState(state.stateType, updatedState);\n    } else {\n      const deltaY = newTouch.clientY - state.startingTouch!.y!;\n      const normalizedDelta = Math.max(\n        -1,\n        Math.min(1, deltaY / VERTICAL_SWIPE_SIZE),\n      );\n      const updatedState = {\n        normalizedDelta,\n      };\n      this.updateState(state.stateType, updatedState);\n    }\n  }\n\n  onAffirmationSwipeEnd(): void {\n    const state = this.state as WritingDrillState;\n    const { selectedSwipeDirection, normalizedDelta } = state;\n    const updatedState: Partial<WritingDrillState> = {\n      startingTouch: undefined,\n      normalizedDelta: 0,\n    };\n    this.updateState(state.stateType, updatedState);\n    if (\n      (selectedSwipeDirection === \"Right\" && normalizedDelta === -1) ||\n      (selectedSwipeDirection === \"Left\" && normalizedDelta === 1) ||\n      (selectedSwipeDirection === \"Up\" && normalizedDelta === 1) ||\n      (selectedSwipeDirection === \"Down\" && normalizedDelta === -1)\n    ) {\n      this.onCardIncorrect();\n    } else if (\n      (selectedSwipeDirection === \"Right\" && normalizedDelta === 1) ||\n      (selectedSwipeDirection === \"Left\" && normalizedDelta === -1) ||\n      (selectedSwipeDirection === \"Up\" && normalizedDelta === -1) ||\n      (selectedSwipeDirection === \"Down\" && normalizedDelta === 1)\n    ) {\n      this.onCardCorrect();\n    }\n  }\n\n  onKeyUp({ key }: KeyboardEvent): void {\n    const { state } = this;\n\n    if (state.stateType !== StateType.WritingDrill) {\n      return;\n    }\n\n    if (state.isTopCardRevealed) {\n      const isSwipeDirectionHorizontal = [\"Right\", \"Left\"].includes(\n        state.selectedSwipeDirection,\n      );\n\n      if (isSwipeDirectionHorizontal) {\n        if (key === \"ArrowRight\" || key === \"Right\") {\n          this.simulateRightSwipe();\n        } else if (key === \"ArrowLeft\" || key === \"Left\") {\n          this.simulateLeftSwipe();\n        }\n      } else {\n        if (key === \"ArrowUp\" || key === \"Up\") {\n          this.simulateUpSwipe();\n        } else if (key === \"ArrowDown\" || key === \"Down\") {\n          this.simulateDownSwipe();\n        }\n      }\n    }\n  }\n\n  onCardReveal(): void {\n    const updatedState: Partial<WritingDrillState> = {\n      isTopCardRevealed: true,\n      normalizedDelta: 0,\n    };\n    this.updateState(StateType.WritingDrill, updatedState);\n  }\n\n  onCardCorrect(): void {\n    this.clearCanvas();\n\n    const state = this.state as WritingDrillState;\n\n    if (state.remainingCards.length > 1) {\n      this.updateState(state.stateType, {\n        remainingCards: state.remainingCards.slice(1),\n        isTopCardRevealed: false,\n      });\n    } else if (state.cardsToRepractice.length > 0) {\n      this.updateState(state.stateType, {\n        remainingCards: randomlySort(state.cardsToRepractice),\n        cardsToRepractice: [],\n        isTopCardRevealed: false,\n      });\n    } else {\n      const newState: PostDrillMenuState = {\n        stateType: StateType.PostDrillMenu,\n        deck: state.deck,\n        initialCards: state.initialCards,\n      };\n      this.setState(newState);\n    }\n  }\n\n  clearCanvas(): void {\n    const { width, height } = this.canvasRef.current!;\n    const ctx = this.canvasRef.current!.getContext(\"2d\")!;\n    ctx.clearRect(0, 0, width, height);\n  }\n\n  onCardIncorrect(): void {\n    this.clearCanvas();\n\n    const state = this.state as WritingDrillState;\n\n    if (state.remainingCards.length > 1) {\n      this.updateState(state.stateType, {\n        remainingCards: state.remainingCards.slice(1),\n        cardsToRepractice: state.cardsToRepractice.concat([\n          state.remainingCards[0],\n        ]),\n        isTopCardRevealed: false,\n      });\n    } else {\n      this.updateState(state.stateType, {\n        remainingCards: randomlySort(\n          state.cardsToRepractice.concat([state.remainingCards[0]]),\n        ),\n        cardsToRepractice: [],\n        isTopCardRevealed: false,\n      });\n    }\n  }\n\n  onDrillRestart(): void {\n    const state = this.state as PostDrillMenuState;\n    this.setState({\n      stateType: StateType.WritingDrill,\n      deck: state.deck,\n      remainingCards: randomlySort(state.initialCards),\n      isTopCardRevealed: false,\n      normalizedDelta: 0,\n      cardsToRepractice: [],\n    });\n  }\n\n  onHome(): void {\n    this.setState({\n      stateType: StateType.DeckMenu,\n    });\n  }\n\n  onPenStart(event: PointerDownEvent): void {\n    const state = this.state as WritingDrillState;\n\n    const [clientX, clientY] =\n      event.type === \"touchstart\"\n        ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY]\n        : [event.clientX, event.clientY];\n    const offsetY = window.innerHeight * 0.11;\n    const adjustedY = clientY - offsetY;\n    this.previousPenLocation = {\n      x: clientX,\n      y: adjustedY,\n    };\n    const ctx = this.canvasRef.current!.getContext(\"2d\")!;\n    ctx.fillStyle = state.isTopCardRevealed\n      ? PEN_CORRECTION_COLOR\n      : PEN_GUESS_COLOR;\n    ctx.fillRect(\n      clientX,\n      clientY - offsetY,\n      PEN_STROKE_WIDTH,\n      PEN_STROKE_WIDTH,\n    );\n  }\n\n  onPenMove(event: PointerMoveEvent): void {\n    event.preventDefault();\n\n    const state = this.state as WritingDrillState;\n\n    if (this.previousPenLocation === null) {\n      return;\n    }\n\n    const [clientX, clientY] =\n      event.type === \"touchmove\"\n        ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY]\n        : [event.clientX, event.clientY];\n    const offsetY = window.innerHeight * 0.11;\n    const adjustedY = clientY - offsetY;\n    const ctx = this.canvasRef.current!.getContext(\"2d\")!;\n    ctx.fillRect(clientX, clientY - offsetY, 1, 1);\n    ctx.beginPath();\n    ctx.moveTo(this.previousPenLocation.x, this.previousPenLocation.y);\n    ctx.lineTo(clientX, adjustedY);\n    ctx.closePath();\n    ctx.lineWidth = PEN_STROKE_WIDTH;\n    ctx.strokeStyle = state.isTopCardRevealed\n      ? PEN_CORRECTION_COLOR\n      : PEN_GUESS_COLOR;\n    ctx.stroke();\n    this.previousPenLocation = {\n      x: clientX,\n      y: adjustedY,\n    };\n  }\n\n  onPenEnd(): void {\n    this.previousPenLocation = null;\n  }\n\n  simulateRightSwipe(): void {\n    const state = this.state as WritingDrillState;\n\n    const start = Date.now();\n    const render = () => {\n      const now = Date.now();\n      const completionFactor = (now - start) / SIMULATED_SWIPE_DURATION;\n      if (completionFactor < 1 + SIMULATED_SWIPE_PAUSE_FACTOR) {\n        requestAnimationFrame(render);\n      } else {\n        if (state.selectedSwipeDirection === \"Right\") {\n          this.onCardCorrect();\n        } else {\n          this.onCardIncorrect();\n        }\n      }\n      this.updateState(state.stateType, {\n        normalizedDelta: Math.min(1, completionFactor),\n      });\n    };\n    render();\n  }\n\n  simulateLeftSwipe(): void {\n    const state = this.state as WritingDrillState;\n\n    const start = Date.now();\n    const render = () => {\n      const now = Date.now();\n      const completionFactor = (now - start) / SIMULATED_SWIPE_DURATION;\n      if (completionFactor < 1 + SIMULATED_SWIPE_PAUSE_FACTOR) {\n        requestAnimationFrame(render);\n      } else {\n        if (state.selectedSwipeDirection === \"Left\") {\n          this.onCardCorrect();\n        } else {\n          this.onCardIncorrect();\n        }\n      }\n      this.updateState(state.stateType, {\n        normalizedDelta: Math.max(-1, -completionFactor),\n      });\n    };\n    render();\n  }\n\n  simulateUpSwipe(): void {\n    const state = this.state as WritingDrillState;\n    const start = Date.now();\n    const render = () => {\n      const now = Date.now();\n      const completionFactor = (now - start) / SIMULATED_SWIPE_DURATION;\n      if (completionFactor < 1 + SIMULATED_SWIPE_PAUSE_FACTOR) {\n        requestAnimationFrame(render);\n      } else {\n        if (state.selectedSwipeDirection === \"Up\") {\n          this.onCardCorrect();\n        } else {\n          this.onCardIncorrect();\n        }\n      }\n      this.updateState(state.stateType, {\n        normalizedDelta: Math.max(-1, -completionFactor),\n      });\n    };\n    render();\n  }\n\n  simulateDownSwipe() {\n    const state = this.state as WritingDrillState;\n\n    const start = Date.now();\n    const render = () => {\n      const now = Date.now();\n      const completionFactor = (now - start) / SIMULATED_SWIPE_DURATION;\n      if (completionFactor < 1 + SIMULATED_SWIPE_PAUSE_FACTOR) {\n        requestAnimationFrame(render);\n      } else {\n        if (state.selectedSwipeDirection === \"Down\") {\n          this.onCardCorrect();\n        } else {\n          this.onCardIncorrect();\n        }\n      }\n      this.updateState(state.stateType, {\n        normalizedDelta: Math.min(1, completionFactor),\n      });\n    };\n    render();\n  }\n}\n\nconst categorySetUtils = {\n  stringify(set: ImmutableSet<MoraCategory>): string {\n    return JSON.stringify([...set.keys()]);\n  },\n  parse(string: string): ImmutableSet<MoraCategory> {\n    return ImmutableSet(JSON.parse(string));\n  },\n};\n\nfunction getInitialCards(\n  categories: ImmutableSet<MoraCategory>,\n  deck: Deck,\n): Card[] {\n  const cards = [];\n  for (const category of categories) {\n    for (const romaji of RomajiMap[category]) {\n      cards.push({\n        romaji,\n        image: kanaMaps[deck]\n          .expect(\"Kana image map has not loaded yet\")\n          .get(romaji)!,\n      });\n    }\n  }\n  return cards;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport CardsAgainstIlliteracy from \"./CardsAgainstIlliteracy\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardsAgainstIlliteracy />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}